y = "Computation time",
colour = NULL,
lty = NULL,
shape = NULL) +
guides(colour = guide_legend(order = 1),
lty = guide_legend(order = 1),
shape = guide_legend(order = 2)) +
theme(legend.justification = c(0, 1),
legend.position = c(0, 1))
ggplot(data = res, aes(x = N, y = tictoc_numerical)) +
geom_line() +
geom_point(data = res %>% filter(status == 4), colour = "white", size = 2) +
geom_point(data = res %>% filter(status == 4)) +
geom_point(data = res %>% filter(status == 5), colour = "white", size = 3) +
geom_point(data = res %>% filter(status == 5), aes(shape = as.character(status))) +
scale_x_continuous(trans = "log10", labels = trans_format("log10", math_format(10^.x))) +
scale_y_continuous(breaks = c(seq(0, 1500, 300)), labels = c("0 sec", "5 min", "10 min", "15 min", "20 min", "25 min")) +
scale_shape_manual(values = 4, labels = "Did not converge") +
labs(x = "Size of dataset",
y = "Computation time",
colour = NULL,
lty = NULL,
shape = NULL) +
guides(colour = guide_legend(order = 1),
lty = guide_legend(order = 1),
shape = guide_legend(order = 2)) +
theme(legend.justification = c(0, 1),
legend.position = c(0, 1))
ggplot(data = res, aes(x = N, y = tictoc_numerical)) +
geom_line() +
geom_point(data = res %>% filter(status == 4), colour = "white", size = 2) +
geom_point(data = res %>% filter(status == 4)) +
geom_point(data = res %>% filter(status == 5), colour = "white", size = 3) +
geom_point(data = res %>% filter(status == 5), aes(shape = as.character(status))) +
scale_x_continuous(trans = "log10", labels = trans_format("log10", math_format(10^.x))) +
scale_y_continuous(breaks = c(seq(0, 1500, 300)), labels = c("0 sec", "5 min", "10 min", "15 min", "20 min", "25 min")) +
scale_shape_manual(values = 4, labels = "Did not converge") +
labs(x = "Size of dataset",
y = "Comuting time",
colour = NULL,
lty = NULL,
shape = NULL) +
guides(colour = guide_legend(order = 1),
lty = guide_legend(order = 1),
shape = guide_legend(order = 2)) +
theme(legend.justification = c(0, 1),
legend.position = c(0, 1))
ggplot(data = res, aes(x = N, y = tictoc_numerical)) +
geom_line() +
geom_point(data = res %>% filter(status == 4), colour = "white", size = 2) +
geom_point(data = res %>% filter(status == 4)) +
geom_point(data = res %>% filter(status == 5), colour = "white", size = 3) +
geom_point(data = res %>% filter(status == 5), aes(shape = as.character(status))) +
scale_x_continuous(trans = "log10", labels = trans_format("log10", math_format(10^.x))) +
scale_y_continuous(breaks = c(seq(0, 1500, 300)), labels = c("0 sec", "5 min", "10 min", "15 min", "20 min", "25 min")) +
scale_shape_manual(values = 4, labels = "Did not converge") +
labs(x = "Size of dataset",
y = "Computing time",
colour = NULL,
lty = NULL,
shape = NULL) +
guides(colour = guide_legend(order = 1),
lty = guide_legend(order = 1),
shape = guide_legend(order = 2)) +
theme(legend.justification = c(0, 1),
legend.position = c(0, 1))
ggsave("Figures/nloptr.png", dpi = 1000, width = 90, height = 60, unit = "mm")
ggplot(data = res, aes(x = N, y = tictoc_numerical / 60)) +
geom_line() +
geom_point(data = res %>% filter(status == 4), colour = "white", size = 2) +
geom_point(data = res %>% filter(status == 4)) +
geom_point(data = res %>% filter(status == 5), colour = "white", size = 3) +
geom_point(data = res %>% filter(status == 5), aes(shape = as.character(status))) +
scale_x_continuous(trans = "log10", labels = trans_format("log10", math_format(10^.x))) +
scale_y_continuous(breaks = c(seq(0, 25, 5))) +
scale_shape_manual(values = 4, labels = "Did not converge") +
labs(x = "Size of dataset",
y = "Computing time (min)",
colour = NULL,
lty = NULL,
shape = NULL) +
guides(colour = guide_legend(order = 1),
lty = guide_legend(order = 1),
shape = guide_legend(order = 2)) +
theme(legend.justification = c(0, 1),
legend.position = c(0, 1))
ggplot(data = res, aes(x = N, y = tictoc_numerical / 60)) +
geom_line() +
geom_point(data = res %>% filter(status == 4), colour = "white", size = 2) +
geom_point(data = res %>% filter(status == 4)) +
geom_point(data = res %>% filter(status == 5), colour = "white", size = 3) +
geom_point(data = res %>% filter(status == 5), aes(shape = as.character(status))) +
scale_x_continuous(trans = "log10", labels = trans_format("log10", math_format(10^.x))) +
scale_y_continuous(breaks = c(seq(0, 25, 5))) +
scale_shape_manual(values = 4, labels = "Did not converge") +
labs(x = "Size of dataset",
y = "Computing time (min)",
colour = NULL,
lty = NULL,
shape = NULL) +
guides(colour = guide_legend(order = 1),
lty = guide_legend(order = 1),
shape = guide_legend(order = 2)) +
theme(legend.justification = c(0, 1),
legend.position = c(0, 1))
ggplot(data = res, aes(x = N, y = tictoc_numerical / 60)) +
geom_line() +
geom_point(data = res %>% filter(status == 4), colour = "white", size = 2) +
geom_point(data = res %>% filter(status == 4)) +
geom_point(data = res %>% filter(status == 5), colour = "white", size = 3) +
geom_point(data = res %>% filter(status == 5), aes(shape = as.character(status))) +
scale_x_continuous(trans = "log10", labels = trans_format("log10", math_format(10^.x))) +
scale_y_continuous(breaks = c(seq(0, 25, 5))) +
scale_shape_manual(values = 4, labels = "Did not converge") +
labs(x = "Size of dataset",
y = "Computing time (minutes)",
colour = NULL,
lty = NULL,
shape = NULL) +
guides(colour = guide_legend(order = 1),
lty = guide_legend(order = 1),
shape = guide_legend(order = 2)) +
theme(legend.justification = c(0, 1),
legend.position = c(0, 1))
ggplot(data = res, aes(x = N, y = tictoc_numerical / 60)) +
geom_line() +
geom_point(data = res %>% filter(status == 4), colour = "white", size = 2) +
geom_point(data = res %>% filter(status == 4)) +
geom_point(data = res %>% filter(status == 5), colour = "white", size = 3) +
geom_point(data = res %>% filter(status == 5), aes(shape = as.character(status))) +
scale_x_continuous(trans = "log10", labels = trans_format("log10", math_format(10^.x))) +
scale_y_continuous(breaks = c(seq(0, 25, 5))) +
scale_shape_manual(values = 4, labels = "Did not converge") +
labs(x = "Size of dataset",
y = "Computing time (min)",
colour = NULL,
lty = NULL,
shape = NULL) +
guides(colour = guide_legend(order = 1),
lty = guide_legend(order = 1),
shape = guide_legend(order = 2)) +
theme(legend.justification = c(0, 1),
legend.position = c(0, 1))
ggsave("Figures/nloptr.png", dpi = 1000, width = 90, height = 60, unit = "mm")
ggplot(data = res, aes(x = N, y = tictoc_numerical / 60)) +
geom_line() +
geom_point(data = res %>% filter(status == 4), colour = "white", size = 2) +
geom_point(data = res %>% filter(status == 4)) +
geom_point(data = res %>% filter(status == 5), colour = "white", size = 3) +
geom_point(data = res %>% filter(status == 5), aes(shape = as.character(status))) +
scale_x_continuous(trans = "log10", labels = trans_format("log10", math_format(10^.x))) +
scale_y_continuous(breaks = c(seq(0, 25, 5))) +
scale_shape_manual(values = 4, labels = "Did not converge") +
labs(x = "Size of dataset",
y = "Computing time (minutes)",
colour = NULL,
lty = NULL,
shape = NULL) +
guides(colour = guide_legend(order = 1),
lty = guide_legend(order = 1),
shape = guide_legend(order = 2)) +
theme(legend.justification = c(0, 1),
legend.position = c(0, 1))
ggsave("Figures/nloptr.png", dpi = 1000, width = 90, height = 60, unit = "mm")
Nseq
Nseq <- 10^seq(1, 5, length.out = 21)
Nseq
source("~/GitHub/OSD/RScript/nloptr.R")
ggplot(data = res, aes(x = N, y = tictoc_numerical / 60)) +
geom_line() +
geom_point(data = res %>% filter(status == 4), colour = "white", size = 2) +
geom_point(data = res %>% filter(status == 4)) +
geom_point(data = res %>% filter(status == 5), colour = "white", size = 3) +
geom_point(data = res %>% filter(status == 5), aes(shape = as.character(status))) +
scale_x_continuous(trans = "log10", labels = trans_format("log10", math_format(10^.x))) +
scale_y_continuous(breaks = c(seq(0, 25, 5))) +
scale_shape_manual(values = 4, labels = "Did not converge") +
labs(x = "Size of dataset",
y = "Computation time (minutes)",
colour = NULL,
lty = NULL,
shape = NULL) +
guides(colour = guide_legend(order = 1),
lty = guide_legend(order = 1),
shape = guide_legend(order = 2)) +
theme(legend.justification = c(0, 1),
legend.position = c(0, 1))
ggsave("Figures/nloptr.png", dpi = 1000, width = 90, height = 60, unit = "mm")
ggplot(data = res, aes(x = N, y = tictoc_numerical / 60)) +
geom_line() +
geom_point(data = res %>% filter(status == 4), colour = "white", size = 2) +
geom_point(data = res %>% filter(status == 4)) +
geom_point(data = res %>% filter(status == 5), colour = "white", size = 3) +
geom_point(data = res %>% filter(status == 5), aes(shape = as.character(status))) +
scale_x_continuous(trans = "log10", labels = trans_format("log10", math_format(10^.x))) +
scale_y_continuous(breaks = c(seq(0, 25, 5))) +
scale_shape_manual(values = 4, labels = "Did not converge") +
labs(x = "Dataset size",
y = "Computation time (minutes)",
colour = NULL,
lty = NULL,
shape = NULL) +
guides(colour = guide_legend(order = 1),
lty = guide_legend(order = 1),
shape = guide_legend(order = 2)) +
theme(legend.justification = c(0, 1),
legend.position = c(0, 1))
ggsave("Figures/nloptr.png", dpi = 1000, width = 90, height = 60, unit = "mm")
ggplot(data = res, aes(x = N, y = tictoc_numerical / 60)) +
geom_line() +
geom_point(data = res %>% filter(status == 4), colour = "white", size = 2) +
geom_point(data = res %>% filter(status == 4)) +
geom_point(data = res %>% filter(status == 5), colour = "white", size = 3) +
geom_point(data = res %>% filter(status == 5), aes(shape = as.character(status))) +
scale_x_continuous(trans = "log10", labels = trans_format("log10", math_format(10^.x))) +
scale_y_continuous(breaks = c(seq(0, 25, 5))) +
scale_shape_manual(values = 4, labels = "Did not converge") +
labs(x = "Dataset size (N)",
y = "Computation time (minutes)",
colour = NULL,
lty = NULL,
shape = NULL) +
guides(colour = guide_legend(order = 1),
lty = guide_legend(order = 1),
shape = guide_legend(order = 2)) +
theme(legend.justification = c(0, 1),
legend.position = c(0, 1))
ggsave("Figures/nloptr.png", dpi = 1000, width = 90, height = 60, unit = "mm")
ggplot(data = res, aes(x = N, y = tictoc_numerical / 60)) +
geom_line() +
geom_point(data = res %>% filter(status == 4), colour = "white", size = 2) +
geom_point(data = res %>% filter(status == 4)) +
geom_point(data = res %>% filter(status == 5), colour = "white", size = 4) +
geom_point(data = res %>% filter(status == 5), aes(shape = as.character(status))) +
scale_x_continuous(trans = "log10", labels = trans_format("log10", math_format(10^.x))) +
scale_y_continuous(breaks = c(seq(0, 25, 5))) +
scale_shape_manual(values = 4, labels = "Did not converge") +
labs(x = "Dataset size (N)",
y = "Computation time (minutes)",
colour = NULL,
lty = NULL,
shape = NULL) +
guides(colour = guide_legend(order = 1),
lty = guide_legend(order = 1),
shape = guide_legend(order = 2)) +
theme(legend.justification = c(0, 1),
legend.position = c(0, 1))
ggsave("Figures/nloptr.png", dpi = 1000, width = 90, height = 60, unit = "mm")
ggplot(data = res, aes(x = N, y = tictoc_numerical / 60)) +
geom_line() +
geom_point(data = res %>% filter(status == 4), colour = "white", size = 2) +
geom_point(data = res %>% filter(status == 4)) +
geom_point(data = res %>% filter(status == 5), colour = "white", size = 3.5) +
geom_point(data = res %>% filter(status == 5), aes(shape = as.character(status))) +
scale_x_continuous(trans = "log10", labels = trans_format("log10", math_format(10^.x))) +
scale_y_continuous(breaks = c(seq(0, 25, 5))) +
scale_shape_manual(values = 4, labels = "Did not converge") +
labs(x = "Dataset size (N)",
y = "Computation time (minutes)",
colour = NULL,
lty = NULL,
shape = NULL) +
guides(colour = guide_legend(order = 1),
lty = guide_legend(order = 1),
shape = guide_legend(order = 2)) +
theme(legend.justification = c(0, 1),
legend.position = c(0, 1))
ggsave("Figures/nloptr.png", dpi = 1000, width = 90, height = 60, unit = "mm")
source("~/GitHub/OSD/RScript/nloptr.R")
ptsize <- 10
theme_set(theme_classic())
theme_update(axis.text = element_text(size = ptsize, colour = "black", family = "serif"),
axis.line = element_line(colour = "black", linewidth = 0.25),
axis.ticks = element_line(colour = "black", linewidth = 0.25),
axis.title.x = element_text(margin = margin(t = 0.25, r = 0, b = 0, l = 0, unit = 'cm')),
axis.title.y = element_text(margin = margin(t = 0, r = 0.25, b = 0, l = 0, unit = 'cm')),
legend.background = element_blank(),
legend.key.width = unit(0, "cm"),
legend.key.height = unit(0.4, "cm"),
legend.margin = margin(0, 0, 0, 0.5, "cm"),
legend.spacing =  unit(0, "cm"),
legend.position = "bottom",
legend.text = element_text(size = ptsize, colour = "black", family = "serif"),
legend.title = element_text(size = ptsize, colour = "black", family = "serif"),
strip.background.x = element_blank(),
panel.border = element_blank(),
panel.grid = element_blank(),
plot.subtitle = element_text(size = ptsize, colour = "black", family = "serif", face = "plain", hjust = 0),
plot.title = element_text(size = ptsize, colour = "black", family = "serif", face = "plain", hjust = 0),
text = element_text(size = ptsize, colour = "black", family = "serif"))
ggplot(data = res, aes(x = N, y = tictoc_numerical)) +
geom_line() +
geom_point(data = res %>% filter(status == 4), colour = "white", size = 2) +
geom_point(data = res %>% filter(status == 4)) +
geom_point(data = res %>% filter(status == 5), colour = "white", size = 3.5) +
geom_point(data = res %>% filter(status == 5), aes(shape = as.character(status))) +
scale_x_continuous(trans = "log10", labels = trans_format("log10", math_format(10^.x))) +
scale_y_continuous(breaks = c(seq(0, 20, 5))) +
scale_shape_manual(values = 4, labels = "Did not converge") +
labs(x = "Dataset size (N)",
y = "Computation time (s)",
colour = NULL,
lty = NULL,
shape = NULL) +
guides(colour = guide_legend(order = 1),
lty = guide_legend(order = 1),
shape = guide_legend(order = 2)) +
theme(legend.justification = c(0, 1),
legend.position = c(0, 1))
ggsave("Figures/nloptr.png", dpi = 1000, width = 80, height = 60, unit = "mm")
# Clean-up. ----
rm(list = ls())
cat("\14")
# Load packages. ----
library("expm")
library("magrittr")
library("Matrix")
library("sampling")
library("tictoc")
library("tidyverse")
source("Rscript/acov.R")
source("Rscript/approx_E_opt.R")
source("Rscript/opt_sampling_scheme.R")
source("Rscript/Phi.R")
# Prepare data. ----
load("Data/VirtSim.R")
df$caseID <- as.numeric(df$caseID)
maximpact <- df %>%
group_by(caseID) %>%
summarise(max_impact_speed = max(impact_speed0, na.rm = TRUE), .groups = "keep") %>%
ungroup() %>%
dplyr::select(caseID, max_impact_speed)
VSdata <- df %>%
dplyr::rename("OEOFF" = eoff,
"prob" = eoff_acc_prob) %>%
mutate(dec = -acc,
crash0 = as.numeric(impact_speed0 > 0),
crash1 = as.numeric(impact_speed1 > 0),
impact_speed_reduction = impact_speed1 - impact_speed0,
injury_risk_reduction = injury_risk1 - injury_risk0,
crash_avoidance = (1 - crash1) * crash0) %>%
dplyr::select(caseID, OEOFF, dec, everything(), -acc) %>%
left_join(maximpact, by = "caseID")
data <- VSdata %>%
filter(crash0 == 1)
w <- with(data, crash0 * prob)
N <- nrow(data)
n <- max(round(N / 100), 10)
y <- data$impact_speed0
logy <- log(data$impact_speed0)
theta0 <- c(weighted.mean(logy, w), sqrt(cov.wt(matrix(logy, ncol = 1), w, method = "ML")$cov))
grads <- function(theta0, y, w = rep(1, nrow(y))) {
Z <- (log(y) - theta0[1]) / theta0[2]
dldMu <- - w * Z / theta0[2]
dldSig <- - w * (Z^2 - 1) / theta0[2]
return(rbind(dldMu, dldSig))
}
hess <- function(theta0, y, w) {
Z <- (log(y) - theta0[1]) / theta0[2]
d1 <- sum(w)
d2 <- sum(w * (3 * Z^2 - 1))
return(diag(c(d1, d2)) / theta0[2]^2)
}
hess2 <- function(theta0, y, w) {
Z <- (log(y) - theta0[1]) / theta0[2]
d1 <- sum(w)
return(diag(c(d1, 2 * d1)) / theta0[2]^2)
}
G <- grads(theta0, y, w)
H <- hess(theta0, y, w)
G <- grads(theta0, y, w)
H <- hess(theta0, y, w)
H2 <- hess2(theta0, y, w)
H
H2
hess <- function(theta0, y, w) {
d1 <- sum(w)
return(diag(sum(w) * c(1, 2)) / theta0[2]^2)
}
G <- grads(theta0, y, w)
H <- hess(theta0, y, w)
H
load("Data/VirtSim.R")
df$caseID <- as.numeric(df$caseID)
maximpact <- df %>%
group_by(caseID) %>%
summarise(max_impact_speed = max(impact_speed0, na.rm = TRUE), .groups = "keep") %>%
ungroup() %>%
dplyr::select(caseID, max_impact_speed)
VSdata <- df %>%
dplyr::rename("OEOFF" = eoff,
"prob" = eoff_acc_prob) %>%
mutate(dec = -acc,
crash0 = as.numeric(impact_speed0 > 0),
crash1 = as.numeric(impact_speed1 > 0),
impact_speed_reduction = impact_speed1 - impact_speed0,
injury_risk_reduction = injury_risk1 - injury_risk0,
crash_avoidance = (1 - crash1) * crash0) %>%
dplyr::select(caseID, OEOFF, dec, everything(), -acc) %>%
left_join(maximpact, by = "caseID")
# Functions.
theta <- function(Y, w = rep(1, nrow(Y))) {
colSums(w * Y) / sum(w)
}
grads <- function(theta0, Y, w = rep(1, nrow(Y))) {
return(t(-w * t(t(Y) - theta0)))
}
hess <- function(theta0, w = rep(1, nrow(Y))) {
return(diag(sum(w), length(theta0)))
}
# Data.
data <- VSdata %>%
filter(crash0 == 1)
dim(datam)
nrow(datam)
nrow(data)
nrow(VSdata) - nrow(data)
# Data.
data <- VSdata %>%
filter(crash0 == 1)
# %>%
#   filter(15 <= caseID & caseID <= 17)
N <- nrow(data)
n <- max(round(N / 100), 10)
w <- with(data, crash0 * prob)
hist(data$impact_speed1)
hist(log(data$impact_speed1))
hist(data$impact_speed1)
hist(sqrt(data$impact_speed1))
?hist
install.packages(weights)
install.packages("weights")
library("weights")
wtd.hist(data$impact_speed0, weights = w)
wtd.hist(data$impact_speed0, weights = w, bins = 10)
wtd.hist(data$impact_speed0, weights = w, breaks = 10)
wtd.hist(data$impact_speed1, weights = w, bins = 10)
wtd.hist(log(data$impact_speed0), weights = w, bins = 10)
wtd.hist(data$impact_speed0, weights = w, bins = 10)
wtd.hist(data$impact_speed0, weights = w, breaks = 10)
warnings()
wtd.hist(data$impact_speed0, w = w, breaks = 10)
wtd.hist(log(data$impact_speed0), w = w, breaks = 10)
wtd.hist(log(data$impact_speed0), breaks = 10)
wtd.hist(data$impact_speed0, breaks = 10)
wtd.hist(data$impact_speed0, breaks = 10, freq = TRUE)
wtd.hist(data$impact_speed0, breaks = 10, freq = FALSE)
wtd.hist(data$impact_speed0, w = w, breaks = 10, freq = FALSE)
data <- VSdata
data$caseID <- factor(data$caseID)
fit <- glm(y~caseID*dec*OEOFF, data = data, family = "quasibinomial")
data <- VSdata
data$caseID <- factor(data$caseID)
data
fit <- glm(y~caseID*dec*OEOFF, data = data, family = "quasibinomial")
names(data$injury_risk0)
data$caseID <- factor(data$caseID)
data$y <- with(data, impact_speed0 / max_impact_speed)
fit <- glm(y~caseID*dec*OEOFF, data = data, family = "quasibinomial")
fit
dim(coef(fit))
length(coef(fit))
pred <- predict(fit)
fit2 <- optim(rep(0, ncol(X)), f, method = "BFGS", control = list(trace = TRUE))
plt <- data %>%
dat %>% mutate(impact_speed  = as.numeric(pred), grp = 1) %>%
bind_rows(data %>% mutate(grp = 0))
plt <- data %>%
mutate(impact_speed  = max_impact_speed * as.numeric(pred), grp = 1) %>%
bind_rows(data %>% mutate(grp = 0))
plt <- data %>%
mutate(impact_speed  = max_impact_speed * as.numeric(pred), grp = 1) %>%
bind_rows(data %>% mutate(grp = 0))
for ( i in 1:1 ){
p <- ggplot(plt %>% filter(caseID %in% (4 * (i - 1) + 1):(4 * i)) ) +
geom_line(aes(x = OEOFF, y = impact_speed, group = dec, colour = dec))  +
facet_grid(caseID~grp, labeller = labeller(grp = c("0" = "Observed", "1" = "Predicted"))) +
theme(legend.position = NULL)
print(p)
}
plt <- data %>%
mutate(impact_speed  = max_impact_speed * as.numeric(pred), grp = 1) %>%
bind_rows(data %>% mutate(impact_speed = impact_speed0, grp = 0))
for ( i in 1:1 ){
p <- ggplot(plt %>% filter(caseID %in% (4 * (i - 1) + 1):(4 * i)) ) +
geom_line(aes(x = OEOFF, y = impact_speed, group = dec, colour = dec))  +
facet_grid(caseID~grp, labeller = labeller(grp = c("0" = "Observed", "1" = "Predicted"))) +
theme(legend.position = NULL)
print(p)
}
hist(pred)
range(pred)
range(data$y)
?predict
pred <- predict(fit, type = "response")
range(pred)
plt <- data %>%
mutate(impact_speed  = max_impact_speed * as.numeric(pred), grp = 1) %>%
bind_rows(data %>% mutate(impact_speed = impact_speed0, grp = 0))
for ( i in 1:1 ){
p <- ggplot(plt %>% filter(caseID %in% (4 * (i - 1) + 1):(4 * i)) ) +
geom_line(aes(x = OEOFF, y = impact_speed, group = dec, colour = dec))  +
facet_grid(caseID~grp, labeller = labeller(grp = c("0" = "Observed", "1" = "Predicted"))) +
theme(legend.position = NULL)
print(p)
}
length(coef(fit))
176 / 44
vcov(fit)
plot(vcov(fit))
plot(as.vector(vcov(fit)))
plot(diag(vcov(fit)))
